#
# Tests for the MRG32k3a generator
#
# These numbers were generated by the `stream` and `stream_seeds`
# utilities, which can be compiled by running `scons` in the `lecuyer`
# directory.
#
#

seeds = Array[[12345, 12345, 12345, 12345, 12345, 12345]]

sums = [5001090.947189088]

firsts = Array[[
                0.12701112204657714,
                0.3185275653967945,
                0.30918601558327008,
                0.82584686292711362,
                0.2216299157820229,
                0.53339538791827878,
                0.4807742033156181,
                0.35555987943812623,
                0.13598841039594017,
                0.75585223716154359
                ]]

lasts = Array[[
               0.2498925616912667,
               0.49652759527734946,
               0.16011136148664246,
               0.86792338721641915,
               0.55630523262347298,
               0.57194505957061714,
               0.067721477496919064,
               0.63141833393252778,
               0.17481334748705299,
               0.90130638318875056
               ]]

next_stream_seeds = Array[Array[
                                [3692455944,
                                 1366884236,
                                 2968912127,
                                 335948734,
                                 4161675175,
                                 475798818],
                                [1015873554,
                                 1310354410,
                                 2249465273,
                                 994084013,
                                 2912484720,
                                 3876682925],
                                [2338701263,
                                 1119171942,
                                 2570676563,
                                 317077452,
                                 3194180850,
                                 618832124]  ]]

next_substream_seeds = Array[Array[
                                   [870504860,
                                    2641697727,
                                    884013853,
                                    339352413,
                                    2374306706,
                                    3651603887],
                                   [460387934,
                                    1532391390,
                                    877287553,
                                    120103512,
                                    2153115941,
                                    335837774],
                                   [3775110060,
                                    3208296044,
                                    1257177538,
                                    378684317,
                                    2867112178,
                                    2201306083] ]]

#
# Primary tests -- these test that the actual implementation conforms
# to the standard implementation. Now with state Cg test
#      

for i = 1:length(seeds)
    rng_gen = MRG32k3aGen(seeds[i])
    gen = next_stream(rng_gen)

    first = Array{Float64}(0)
    last = Array{Float64}(0)

    _sum = 0
    for j = 1:10^7
        z = rand(gen)
        _sum += z

        if j <= 10
            append!(first, [z])
        elseif j > 10^7 - 10
            append!(last, [z])
        end
    end

    @test _sum == sums[i]
    @test all(first .== firsts[i]);
    @test all(last .== lasts[i]);    
    
    for j = 1:3
        gen = next_stream(rng_gen)
        temp_seed = get_state(gen)
        @test temp_seed == next_stream_seeds[i][j]
    end
    
    gen = MRG32k3a(seeds[i])
    for j= 1:3
        next_substream!(gen)
        temp_seed = get_state(gen)
        @test temp_seed == next_substream_seeds[i][j]
    end
end
   
#
# Test that the various overloads of `rand` return the proper type.
#
rng = MRG32k3a([12345, 12345, 12345, 12345, 12345, 12345])
@test typeof(rand(rng)) == Float64
@test typeof(rand(rng, Float64)) == Float64
@test typeof(rand(rng, Float32)) == Float32
@test typeof(rand(rng, Float16)) == Float16

#
# Test AdvanceState against original implementation
#

rng = MRG32k3a([1,2,3,4,5,6])
rng_gen = MRG32k3aGen([1,2,3,4,5,6])
advance_state!(rng, 23, 1611392)
@test rng.Cg == [2437590332,
                 1899628456,
                 3114422128,
                 2899718867,
                 1085495888,
                 737655219]

#
# Test srand
#
test_seed = ones(Int64,6)
srand(rng, test_seed)
srand(rng_gen, test_seed)
@test rng.Cg == rng.Ig == rng.Bg == test_seed 
@test rng_gen.nextSeed == test_seed

#
# Test invalid seeds
#
@test_throws AssertionError g = MRG32k3a([1, 1, 1, 1, 1])
@test_throws AssertionError g = MRG32k3a([1, 1, 2^32, 1, 1, 1])
@test_throws AssertionError g = MRG32k3a([1, 1, 1, 2^32, 1, 1])
@test_throws AssertionError g = MRG32k3a([0, 0, 0, 1, 1, 1])
@test_throws AssertionError g = MRG32k3a([1, 1, 1, 0, 0, 0])

#
# Test reset_stream!
#
reset_stream!(rng)
@test rng.Cg == rng.Bg == rng.Ig

#
# Test reset_substream!
#
advance_state!(rng, 12, 15)
@test rng.Cg != rng.Bg
reset_substream!(rng)
@test rng.Cg == rng.Bg




